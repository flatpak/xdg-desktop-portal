<?xml version="1.0"?>
<!--
 Copyright (C) 2018 Red Hat, Inc.

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2 of the License, or (at your option) any later version.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public
 License along with this library. If not, see <http://www.gnu.org/licenses/>.

 Author: Matthias Clasen <mclasen@redhat.com>
-->

<node name="/" xmlns:doc="http://www.freedesktop.org/dbus/1.0/doc.dtd">
  <!--
      org.freedesktop.portal.Location:
      @short_description: Portal for obtaining information about the location

      This simple interface lets sandboxed applications query basic
      information about the location.

      This documentation describes version 1 of this interface.
  -->
  <interface name="org.freedesktop.portal.Location">
    <!--
        CreateSession:
        @options: Vardict with optional further information
        @handle: Object path for the created :ref:`org.freedesktop.portal.Session` object

        Create a location session. A successfully created session can at
        any time be closed using :ref:`org.freedesktop.portal.Session.Close`, or may
        at any time be closed by the portal implementation, which will be
        signalled via :ref:`org.freedesktop.portal.Session::Closed`.

        Supported keys in the @options vardict include:

        * ``session_handle_token`` (``s``)

              A string that will be used as the last element of the session handle. Must be a valid
              object path element. See the :ref:`org.freedesktop.portal.Session` documentation for
              more information about the session handle.

        * ``distance-threshold`` (``u``)

          Distance threshold in meters. Default is 0.

        * ``time-threshold`` (``u``)

          Time threshold in seconds. Default is 0.

        * ``accuracy`` (``u``)

          Requested accuracy. Default is ``EXACT``. Supported values:

          - ``NONE``: 0
          - ``COUNTRY``: 1
          - ``CITY``: 2
          - ``NEIGHBORHOOD``: 3
          - ``STREET``: 4
          - ``EXACT``: 5
    -->
    <method name="CreateSession">
      <arg type="a{sv}" name="options" direction="in"/>
      <arg type="o" name="handle" direction="out"/>
    </method>

    <!--
        Start:
        @session_handle: Object path for the :ref:`org.freedesktop.portal.Session` object
        @parent_window: Identifier for the application window, see :ref:`Common Conventions <window-identifiers>`
        @options: Vardict with optional further information
        @handle: Object path for the :ref:`org.freedesktop.portal.Request` object representing this call

        Start the location session.
        An application can only attempt start a session once.

        Supported keys in the @options vardict include:

        * ``handle_token`` (``s``)

          A string that will be used as the last element of the @handle. Must be a valid
          object path element. See the :ref:`org.freedesktop.portal.Request` documentation for
          more information about the @handle.
    -->
    <method name="Start">
      <arg type="o" name="session_handle" direction="in"/>
      <arg type="s" name="parent_window" direction="in"/>
      <arg type="a{sv}" name="options" direction="in"/>
      <arg type="o" name="handle" direction="out"/>
    </method>

    <!--
        LocationUpdated:
        @session_handle: Object path for the :ref:`org.freedesktop.portal.Session` object
        @location: Vardict with the current location data

        The LocationUpdated signal is emitted when the location has changed, as well
        as when the initial location has been determined.

        The following results may get returned via the @location:

        * ``Latitude`` (``d``)

          The latitude, in degrees.

        * ``Longitude`` (``d``)

          The longitude, in degrees.

        * ``Altitude`` (``d``)

          The altitude, in meters.

        * ``Accuracy`` (``d``)

          The accuracy, in meters.

        * ``Speed`` (``d``)

          The speed, in meters per second.

        * ``Heading`` (``d``)

          The heading, in degrees, going clockwise. North 0, East 90, South 180, West 270.

        * ``Timestamp`` (``(tt)``)

          The timestamp, as seconds and microseconds since the Unix epoch.
      -->
    <signal name="LocationUpdated">
      <arg type="o" name="session_handle" direction="out"/>
      <arg type="a{sv}" name="location" direction="out"/>
    </signal>

    <property name="version" type="u" access="read"/>
  </interface>
</node>
