<?xml version="1.0"?>
<!--
 Copyright (C) 2016 Red Hat, Inc.

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2 of the License, or (at your option) any later version.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public
 License along with this library. If not, see <http://www.gnu.org/licenses/>.

 Author: Matthias Clasen <mclasen@redhat.com>
-->

<node name="/" xmlns:doc="http://www.freedesktop.org/dbus/1.0/doc.dtd">
  <!--
      org.freedesktop.portal.Device:
      @short_description: Portal for device access

      This interface lets services ask if an application should
      get access to devices such as microphones, speakers or cameras.
      Not a portal in the strict sense, since the API is not directly
      accessible to applications inside the sandbox.

      This documentation describes version 2 of this interface.
    -->
  <interface name="org.freedesktop.portal.Device">
    <!--
        AccessDevice:
        @pid: the pid of the application on whose behalf the request is made
        @devices: a list of devices to request access to. Supported values are 'microphone', 'speakers', 'camera'. Asking for multiple devices at the same time may or may not be supported
        @options: vardict with optional further information
        @handle: Object path for the #org.freedesktop.portal.Request object representing this call

        Asks for access to a device.

        Supported keys in the @options vardict include:
        <variablelist>
          <varlistentry>
            <term>handle_token s</term>
            <listitem><para>
              A string that will be used as the last element of the @handle. Must be a valid
              object path element. See the #org.freedesktop.portal.Request documentation for
              more information about the @handle.
            </para></listitem>
          </varlistentry>
        </variablelist>
     -->
    <method name="AccessDevice">
      <arg type="u" name="pid" direction="in"/>
      <arg type="as" name="devices" direction="in"/>
      <arg type="a{sv}" name="options" direction="in"/>
      <arg type="o" name="handle" direction="out"/>
    </method>

    <!--
        OpenPipeWireRemote:
        @options: Vardict with optional further information
        @fd: File descriptor of an open PipeWire remote.

        Open a file descriptor to the PipeWire remote where the microphone,
        speakers, and camera nodes are available. The file descriptor should be
        used to create a <classname>pw_core</classname> object, by using
        <function>pw_context_connect_fd</function>.

        Supported keys in the @options vardict include:
        <variablelist>
          <varlistentry>
            <term>devices as</term>
            <listitem><para>
              The devices to access. Supported devices for this call are 'camera',
              'microphone', and 'speakers'.
            </para></listitem>
          </varlistentry>
        </variablelist>

        This method will only succeed if the application already has permission
        to access any one of the devices requested.

        This option was added in version 2 of this interface.
    -->
    <method name="OpenPipeWireRemote">
      <annotation name="org.gtk.GDBus.C.Name" value="open_pipewire_remote"/>
      <annotation name="org.gtk.GDBus.C.UnixFD" value="true"/>
      <arg type="a{sv}" name="options" direction="in"/>
      <arg type="h" name="fd" direction="out"/>
    </method>

    <!--
        IsCameraPresent:

        A boolean stating whether there is any camera available.

        This property was added in version 2 of this interface.
    -->
    <property name="IsCameraPresent" type="b" access="read"/>

    <!--
        IsSpeakerPresent:

        A boolean stating whether there is any speaker available.

        This property was added in version 2 of this interface.
    -->
    <property name="IsSpeakerPresent" type="b" access="read"/>
    <!--
        IsMicrophonePresent:

        A boolean stating whether there is any microphone available.

        This property was added in version 2 of this interface.
    -->
    <property name="IsMicrophonePresent" type="b" access="read"/>

    <property name="version" type="u" access="read"/>
  </interface>
</node>
