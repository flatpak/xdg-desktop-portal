name: Portal CI

on: [push, pull_request]

env:
  DEBIAN_FRONTEND: noninteractive
  TESTS_TIMEOUT: 10 # in minutes

jobs:
  check:
    name: Ubuntu 21.10 build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: ['gcc', 'clang']
        sanitizer: ['address']

    env:
      UBUNTU_VERSION: impish
      CC: ${{ matrix.compiler }}
      BASE_CFLAGS: -Wp,-D_FORTIFY_SOURCE=2
      BUILD_CONTAINER: ${{ matrix.compiler }}-build-container
      RUN_CMD: docker exec -t -w /src -e TEST_IN_CI -e ASAN_OPTIONS -e G_MESSAGES_DEBUG -e XDG_DATA_DIRS ${{ matrix.compiler }}-build-container
      AS_USER: runuser -u tester --

    steps:
    - name: Prepare environment
      id: env-setup
      run: |
        if [ "${{ matrix.sanitizer }}" == "address" ]; then
          echo "::set-output name=cflags::$BASE_CFLAGS" \
            "-fsanitize=undefined -fsanitize-undefined-trap-on-error -fsanitize=address";
        else
          echo "::set-output name=cflags::$BASE_CFLAGS";
        fi

    - name: Prepare container
      run: |
        docker run --name $BUILD_CONTAINER \
          --tty --device /dev/fuse --cap-add SYS_ADMIN \
          --security-opt apparmor:unconfined \
          -v $(pwd):/src \
          -e DEBIAN_FRONTEND \
          -e DEBCONF_NONINTERACTIVE_SEEN=true \
          -e TERM=dumb \
          -e MAKEFLAGS="-j $(getconf _NPROCESSORS_ONLN)" \
          -e CC -e CFLAGS="${{ steps.env-setup.outputs.cflags }}" \
          -d ubuntu:$UBUNTU_VERSION sleep infinity

    - name: Install dependencies
      run: |
        $RUN_CMD apt-get update
        $RUN_CMD apt-get upgrade -y
        $RUN_CMD apt-get install -y --no-install-recommends \
          ${{ matrix.compiler }} \
          autoconf \
          automake \
          autopoint \
          desktop-file-utils \
          fuse3 \
          gettext \
          gnome-desktop-testing \
          gtk-doc-tools \
          libcap2-bin \
          libflatpak-dev \
          libfontconfig1-dev \
          libfuse3-dev \
          libgdk-pixbuf-2.0-dev \
          libgeoclue-2-dev \
          libglib2.0-dev \
          libjson-glib-dev \
          libpipewire-0.3-dev \
          libportal-dev \
          libsystemd-dev \
          libtool \
          llvm \
          make \
          python3-gi \
          shared-mime-info

    - name: Check out xdg-desktop-portal
      uses: actions/checkout@v2

    - name: Setup test user
      run: |
        $RUN_CMD adduser --disabled-password --gecos "" tester
        $RUN_CMD chown tester:tester . -R

    - name: Configure xdg-desktop-portal
      run: $RUN_CMD $AS_USER ./autogen.sh --disable-dependency-tracking --enable-installed-tests

    - name: Build xdg-desktop-portal
      run: $RUN_CMD $AS_USER make

    - name: Run xdg-desktop-portal tests
      run: $RUN_CMD $AS_USER timeout --signal=KILL -v ${TESTS_TIMEOUT}m make check
      env:
        TEST_IN_CI: 1
        G_MESSAGES_DEBUG: all
        ASAN_OPTIONS: detect_leaks=0 # Right now we're not fully clean, but this gets us use-after-free etc

    - name: Install xdg-desktop-portal
      run: $RUN_CMD make install

    - name: Run xdg-desktop-portal installed-tests
      run: |
        test -n "$($RUN_CMD $AS_USER gnome-desktop-testing-runner -l xdg-desktop-portal)"
        $RUN_CMD $AS_USER \
          env TEST_INSTALLED_IN_CI=1 XDG_DATA_DIRS=/src/tests/share/:$XDG_DATA_DIRS \
          gnome-desktop-testing-runner --report-directory installed-test-logs/ \
            -t $((TESTS_TIMEOUT * 60)) xdg-desktop-portal
      env:
        G_MESSAGES_DEBUG: all
        TEST_IN_CI: 1
        XDG_DATA_DIRS: /usr/local/share:/usr/share
        ASAN_OPTIONS: detect_leaks=0 # Right now we're not fully clean, but this gets us use-after-free etc

    - name: Upload test logs
      uses: actions/upload-artifact@v2
      if: failure() || cancelled()
      with:
        name: test logs
        path: |
          tests/*.log
          test-*.log
          installed-test-logs/

  xenial:
    name: Ubuntu 16.04 build (old glib)
    runs-on: ubuntu-latest
    container: ubuntu:16.04
    steps:
    - name: Install dependencies
      run: |
        apt-get update -y
        apt-get install -y software-properties-common
        add-apt-repository ppa:alexlarsson/flatpak
        apt-get install -y \
          autoconf \
          automake \
          autopoint \
          desktop-file-utils \
          gcc \
          gettext \
          gtk-doc-tools \
          libfontconfig1-dev \
          libgdk-pixbuf2.0-dev \
          libglib2.0-dev \
          libjson-glib-dev \
          libsystemd-dev \
          libtool \
          shared-mime-info

    - name: Install libfuse3
      run: |
        # Install libfuse3 dependencies
        apt-get install -y git python3-pip udev
        pip3 install meson==0.56.2 ninja
        git clone https://github.com/libfuse/libfuse.git
        cd libfuse
        meson _build -Dexamples=false -Dtests=false
        ninja -C _build install

    - name: Check out xdg-desktop-portal
      uses: actions/checkout@v2

    - name: Configure xdg-desktop-portal
      # TODO: Enable gtk-doc builds
      # Meson to old to build libportal
      # Could not find a pipewire package
      # Geoclue is in 18.04 too old
      run: ./autogen.sh --disable-pipewire --disable-geoclue --disable-libportal

    - name: Build xdg-desktop-portal
      run: make -j $(getconf _NPROCESSORS_ONLN)
